Ниже приведён один из подходов для автоматической генерации подобной структуры проекта с перечнем методов (функций) в файлах, которую можно вставить в файл Readme.md. Идея заключается в том, чтобы написать специальный Python-скрипт, который:

1. Рекурсивно обходит папки и файлы проекта.

2. Для каждого Python-файла с помощью модуля ast парсит его содержимое и извлекает определения функций (и, при необходимости, методов классов).

3. Формирует текстовую визуализацию в виде «дерева», которое можно вставить в Readme.md.

Ниже приведён пример такого скрипта.

 ```
 import os
import ast
import sys
import io



try:
    import pathspec
except ImportError:
    pathspec = None
    print("Для поддержки .gitignore установите пакет 'pathspec' (pip install pathspec).")


def get_functions(filepath):
    """Извлекает имена функций, объявленных на верхнем уровне в файле."""
    try:
        with open(filepath, encoding="utf-8") as f:
            file_content = f.read()
    except Exception as e:
        print(f"Ошибка чтения {filepath}: {e}")
        return []

    try:
        tree = ast.parse(file_content, filename=filepath)
    except SyntaxError as e:
        print(f"Ошибка синтаксиса в {filepath}: {e}")
        return []

    functions = []
    for node in ast.walk(tree):
        if isinstance(node, ast.FunctionDef):
            functions.append(node.name)
    return functions


def load_ignore_spec(root):
    """
    Загружает правила игнорирования из .gitignore,
    а также добавляет папку .venv в список игнорируемых объектов.
    """
    patterns = []
    gitignore_file = os.path.join(root, ".gitignore")
    if os.path.isfile(gitignore_file):
        try:
            with open(gitignore_file, encoding="utf-8") as f:
                patterns.extend([line.strip() for line in f if line.strip() and not line.startswith("#")])
        except Exception as e:
            print(f"Не удалось прочитать .gitignore: {e}")

    # Обязательно игнорируем папку .venv, даже если её нет в .gitignore
    if ".venv" not in patterns:
        patterns.append(".venv")

    if ".git" not in patterns:
        patterns.append(".git")

    if pathspec:
        return pathspec.PathSpec.from_lines("gitwildmatch", patterns)
    else:
        return None  # Если pathspec не установлен, правила игнорирования не будут применяться


def print_tree(startpath, spec, root, indent_level=0):
    """
    Рекурсивно обходит директорию и печатает её содержимое в виде дерева.
    Для .py файлов дополнительно выводит имена функций.
    Перед выводом проверяет, не соответствует ли путь правилам игнорирования.
    """
    try:
        items = sorted(os.listdir(startpath))
    except Exception as e:
        print(" " * (indent_level * 4) + f"Ошибка доступа к {startpath}: {e}")
        return

    for index, item in enumerate(items):
        path = os.path.join(startpath, item)
        rel_path = os.path.relpath(path, root)

        # Если установлен spec и текущий путь удовлетворяет правилу игнорирования, пропускаем его
        if spec and spec.match_file(rel_path):
            continue

        is_last = index == len(items) - 1
        prefix = "    " * indent_level + ("└── " if is_last else "├── ")

        if os.path.isdir(path):
            print(f"{prefix}{item}/")
            print_tree(path, spec, root, indent_level + 1)
        elif item.endswith(".py"):
            print(f"{prefix}{item}")
            funcs = get_functions(path)
            for func in funcs:
                func_prefix = "    " * (indent_level + 1) + "├── "
                print(f"{func_prefix}def {func}")
        else:
            print(f"{prefix}{item}")


if __name__ == '__main__':
    # Переопределяем стандартный вывод с кодировкой UTF-8
    sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')
    # Определяем корневую директорию как ту, в которой находится данный скрипт
    project_path = os.path.dirname(os.path.abspath(__file__))
    ignore_spec = load_ignore_spec(project_path)
    print_tree(project_path, ignore_spec, project_path)

  ```

  Как использовать

1. Разместите скрипт.
   Сохраните данный скрипт в файл, например, generate_tree.py в корне вашего проекта.

2. Запустите скрипт.
   В терминале выполните команду:
    ```
   python generate_tree.py > structure.txt
    ```
   В файле structure.txt будет сгенерировано дерево проекта со списком функций (вы можете сразу открыть этот файл, скопировать содержимое и вставить в Readme.md).

3. Редактирование.
   Возможна небольшая доработка под ваши нужды. Например, можно выбирать, выводить ли функции только верхнего уровня или внутри классов, форматирование дерева и т.д.

---

▎Пример вывода

При наличии следующей структуры проекта:
 ```
project/
├── bot/
│   ├── __init__.py
│   ├── module1.py
│   └── module2.py
└── main.py
 ```

и если в файле module1.py определена функция metod1, а в module2.py — metod2, то вывод может выглядеть примерно так:
 ```
└── project/
    ├── bot/
    │   ├── __init__.py
    │   ├── module1.py
    │   │   ├── def metod1
    │   └── module2.py
    │       ├── def metod2
    └── main.py
 ```

> Замечание:
> В данном примере скрипт выводит все найденные определения функций. Если в файлах присутствуют функции, объявленные внутри классов, то они также будут отображены (так как при обходе дерева AST все FunctionDef попадаются). При необходимости можно добавить дополнительную фильтрацию или структурирование (например, вложенные функции или методы классов).


1. Определение корневой директории:
   Мы используем функцию os.path.abspath(__file__) для получения абсолютного пути к файлу, а затем os.path.dirname() для получения директории, содержащей скрипт.

   project_path = os.path.dirname(os.path.abspath(__file__))


2. Проверка имени модуля:
   Мы исправили проверку запуска скрипта, используя стандартное условие:

   if __name__ == '__main__':

   Это позволит выполнить код только при прямом запуске этого файла.

Теперь при запуске скрипта будет сгенерировано дерево файлов и директорий относительно самого скрипта.

1. Жёсткое исключение .venv: Если встречается директория с именем .venv, она пропускается.

2. Использование .gitignore: Если в корневой директории имеется файл .gitignore, то с его помощью исключаются файлы и папки, удовлетворяющие указанным правилам. Для разбора .gitignore удобно использовать пакет pathspec (https://pypi.org/project/pathspec/). Его можно установить командой pip install pathspec.

Ниже полный пример кода: